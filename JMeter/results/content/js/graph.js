/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 41.0, "minX": 0.0, "maxY": 7178.0, "series": [{"data": [[0.0, 41.0], [0.1, 42.0], [0.2, 42.0], [0.3, 42.0], [0.4, 42.0], [0.5, 42.0], [0.6, 42.0], [0.7, 42.0], [0.8, 42.0], [0.9, 42.0], [1.0, 42.0], [1.1, 42.0], [1.2, 42.0], [1.3, 43.0], [1.4, 43.0], [1.5, 43.0], [1.6, 43.0], [1.7, 43.0], [1.8, 43.0], [1.9, 43.0], [2.0, 43.0], [2.1, 43.0], [2.2, 43.0], [2.3, 43.0], [2.4, 43.0], [2.5, 43.0], [2.6, 43.0], [2.7, 43.0], [2.8, 43.0], [2.9, 43.0], [3.0, 43.0], [3.1, 43.0], [3.2, 43.0], [3.3, 43.0], [3.4, 44.0], [3.5, 44.0], [3.6, 44.0], [3.7, 44.0], [3.8, 44.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 44.0], [4.3, 44.0], [4.4, 44.0], [4.5, 44.0], [4.6, 44.0], [4.7, 44.0], [4.8, 44.0], [4.9, 44.0], [5.0, 44.0], [5.1, 44.0], [5.2, 44.0], [5.3, 44.0], [5.4, 44.0], [5.5, 44.0], [5.6, 44.0], [5.7, 44.0], [5.8, 44.0], [5.9, 44.0], [6.0, 44.0], [6.1, 44.0], [6.2, 44.0], [6.3, 44.0], [6.4, 44.0], [6.5, 44.0], [6.6, 44.0], [6.7, 44.0], [6.8, 44.0], [6.9, 44.0], [7.0, 44.0], [7.1, 44.0], [7.2, 44.0], [7.3, 44.0], [7.4, 44.0], [7.5, 44.0], [7.6, 44.0], [7.7, 44.0], [7.8, 44.0], [7.9, 44.0], [8.0, 44.0], [8.1, 44.0], [8.2, 44.0], [8.3, 44.0], [8.4, 44.0], [8.5, 44.0], [8.6, 44.0], [8.7, 44.0], [8.8, 44.0], [8.9, 45.0], [9.0, 45.0], [9.1, 45.0], [9.2, 45.0], [9.3, 45.0], [9.4, 45.0], [9.5, 45.0], [9.6, 45.0], [9.7, 45.0], [9.8, 45.0], [9.9, 45.0], [10.0, 45.0], [10.1, 45.0], [10.2, 45.0], [10.3, 45.0], [10.4, 45.0], [10.5, 45.0], [10.6, 45.0], [10.7, 45.0], [10.8, 45.0], [10.9, 45.0], [11.0, 45.0], [11.1, 45.0], [11.2, 45.0], [11.3, 45.0], [11.4, 45.0], [11.5, 45.0], [11.6, 45.0], [11.7, 45.0], [11.8, 45.0], [11.9, 45.0], [12.0, 45.0], [12.1, 45.0], [12.2, 45.0], [12.3, 45.0], [12.4, 45.0], [12.5, 45.0], [12.6, 45.0], [12.7, 45.0], [12.8, 45.0], [12.9, 45.0], [13.0, 45.0], [13.1, 45.0], [13.2, 45.0], [13.3, 45.0], [13.4, 45.0], [13.5, 45.0], [13.6, 45.0], [13.7, 45.0], [13.8, 45.0], [13.9, 45.0], [14.0, 45.0], [14.1, 45.0], [14.2, 45.0], [14.3, 45.0], [14.4, 45.0], [14.5, 45.0], [14.6, 45.0], [14.7, 45.0], [14.8, 45.0], [14.9, 45.0], [15.0, 45.0], [15.1, 45.0], [15.2, 45.0], [15.3, 45.0], [15.4, 45.0], [15.5, 45.0], [15.6, 45.0], [15.7, 45.0], [15.8, 45.0], [15.9, 45.0], [16.0, 45.0], [16.1, 45.0], [16.2, 45.0], [16.3, 45.0], [16.4, 45.0], [16.5, 45.0], [16.6, 45.0], [16.7, 45.0], [16.8, 45.0], [16.9, 45.0], [17.0, 45.0], [17.1, 45.0], [17.2, 45.0], [17.3, 45.0], [17.4, 45.0], [17.5, 45.0], [17.6, 45.0], [17.7, 45.0], [17.8, 45.0], [17.9, 45.0], [18.0, 45.0], [18.1, 45.0], [18.2, 45.0], [18.3, 45.0], [18.4, 45.0], [18.5, 45.0], [18.6, 45.0], [18.7, 45.0], [18.8, 45.0], [18.9, 45.0], [19.0, 45.0], [19.1, 45.0], [19.2, 45.0], [19.3, 45.0], [19.4, 45.0], [19.5, 45.0], [19.6, 45.0], [19.7, 45.0], [19.8, 45.0], [19.9, 45.0], [20.0, 45.0], [20.1, 45.0], [20.2, 45.0], [20.3, 45.0], [20.4, 45.0], [20.5, 45.0], [20.6, 45.0], [20.7, 45.0], [20.8, 45.0], [20.9, 45.0], [21.0, 45.0], [21.1, 45.0], [21.2, 45.0], [21.3, 45.0], [21.4, 45.0], [21.5, 45.0], [21.6, 45.0], [21.7, 45.0], [21.8, 45.0], [21.9, 45.0], [22.0, 45.0], [22.1, 45.0], [22.2, 45.0], [22.3, 45.0], [22.4, 45.0], [22.5, 45.0], [22.6, 45.0], [22.7, 45.0], [22.8, 45.0], [22.9, 45.0], [23.0, 45.0], [23.1, 45.0], [23.2, 45.0], [23.3, 45.0], [23.4, 45.0], [23.5, 45.0], [23.6, 45.0], [23.7, 45.0], [23.8, 45.0], [23.9, 45.0], [24.0, 45.0], [24.1, 45.0], [24.2, 45.0], [24.3, 45.0], [24.4, 45.0], [24.5, 45.0], [24.6, 45.0], [24.7, 45.0], [24.8, 45.0], [24.9, 45.0], [25.0, 45.0], [25.1, 45.0], [25.2, 45.0], [25.3, 45.0], [25.4, 45.0], [25.5, 45.0], [25.6, 45.0], [25.7, 45.0], [25.8, 45.0], [25.9, 45.0], [26.0, 45.0], [26.1, 45.0], [26.2, 45.0], [26.3, 45.0], [26.4, 45.0], [26.5, 45.0], [26.6, 45.0], [26.7, 45.0], [26.8, 45.0], [26.9, 45.0], [27.0, 45.0], [27.1, 45.0], [27.2, 45.0], [27.3, 45.0], [27.4, 45.0], [27.5, 45.0], [27.6, 45.0], [27.7, 45.0], [27.8, 45.0], [27.9, 45.0], [28.0, 45.0], [28.1, 45.0], [28.2, 45.0], [28.3, 45.0], [28.4, 45.0], [28.5, 45.0], [28.6, 45.0], [28.7, 45.0], [28.8, 46.0], [28.9, 46.0], [29.0, 46.0], [29.1, 46.0], [29.2, 46.0], [29.3, 46.0], [29.4, 46.0], [29.5, 46.0], [29.6, 46.0], [29.7, 46.0], [29.8, 46.0], [29.9, 46.0], [30.0, 46.0], [30.1, 46.0], [30.2, 46.0], [30.3, 46.0], [30.4, 46.0], [30.5, 46.0], [30.6, 46.0], [30.7, 46.0], [30.8, 46.0], [30.9, 46.0], [31.0, 46.0], [31.1, 46.0], [31.2, 46.0], [31.3, 46.0], [31.4, 46.0], [31.5, 46.0], [31.6, 46.0], [31.7, 46.0], [31.8, 46.0], [31.9, 46.0], [32.0, 46.0], [32.1, 46.0], [32.2, 46.0], [32.3, 46.0], [32.4, 46.0], [32.5, 46.0], [32.6, 46.0], [32.7, 46.0], [32.8, 46.0], [32.9, 46.0], [33.0, 46.0], [33.1, 46.0], [33.2, 46.0], [33.3, 46.0], [33.4, 46.0], [33.5, 46.0], [33.6, 46.0], [33.7, 46.0], [33.8, 46.0], [33.9, 46.0], [34.0, 46.0], [34.1, 46.0], [34.2, 46.0], [34.3, 46.0], [34.4, 46.0], [34.5, 46.0], [34.6, 46.0], [34.7, 46.0], [34.8, 46.0], [34.9, 46.0], [35.0, 46.0], [35.1, 46.0], [35.2, 46.0], [35.3, 46.0], [35.4, 46.0], [35.5, 46.0], [35.6, 46.0], [35.7, 46.0], [35.8, 46.0], [35.9, 46.0], [36.0, 46.0], [36.1, 46.0], [36.2, 46.0], [36.3, 46.0], [36.4, 46.0], [36.5, 46.0], [36.6, 46.0], [36.7, 46.0], [36.8, 46.0], [36.9, 46.0], [37.0, 46.0], [37.1, 46.0], [37.2, 46.0], [37.3, 46.0], [37.4, 46.0], [37.5, 46.0], [37.6, 46.0], [37.7, 46.0], [37.8, 46.0], [37.9, 46.0], [38.0, 46.0], [38.1, 46.0], [38.2, 46.0], [38.3, 46.0], [38.4, 46.0], [38.5, 46.0], [38.6, 46.0], [38.7, 46.0], [38.8, 46.0], [38.9, 46.0], [39.0, 46.0], [39.1, 46.0], [39.2, 46.0], [39.3, 46.0], [39.4, 46.0], [39.5, 46.0], [39.6, 46.0], [39.7, 46.0], [39.8, 46.0], [39.9, 46.0], [40.0, 46.0], [40.1, 46.0], [40.2, 46.0], [40.3, 46.0], [40.4, 46.0], [40.5, 46.0], [40.6, 46.0], [40.7, 46.0], [40.8, 46.0], [40.9, 46.0], [41.0, 46.0], [41.1, 46.0], [41.2, 46.0], [41.3, 46.0], [41.4, 46.0], [41.5, 46.0], [41.6, 46.0], [41.7, 46.0], [41.8, 46.0], [41.9, 46.0], [42.0, 46.0], [42.1, 46.0], [42.2, 46.0], [42.3, 46.0], [42.4, 46.0], [42.5, 46.0], [42.6, 46.0], [42.7, 46.0], [42.8, 46.0], [42.9, 46.0], [43.0, 46.0], [43.1, 46.0], [43.2, 46.0], [43.3, 46.0], [43.4, 46.0], [43.5, 46.0], [43.6, 46.0], [43.7, 46.0], [43.8, 46.0], [43.9, 46.0], [44.0, 46.0], [44.1, 46.0], [44.2, 46.0], [44.3, 46.0], [44.4, 46.0], [44.5, 46.0], [44.6, 46.0], [44.7, 46.0], [44.8, 46.0], [44.9, 46.0], [45.0, 46.0], [45.1, 46.0], [45.2, 46.0], [45.3, 46.0], [45.4, 46.0], [45.5, 46.0], [45.6, 46.0], [45.7, 46.0], [45.8, 46.0], [45.9, 46.0], [46.0, 46.0], [46.1, 46.0], [46.2, 46.0], [46.3, 46.0], [46.4, 46.0], [46.5, 46.0], [46.6, 46.0], [46.7, 46.0], [46.8, 46.0], [46.9, 46.0], [47.0, 46.0], [47.1, 46.0], [47.2, 46.0], [47.3, 46.0], [47.4, 46.0], [47.5, 46.0], [47.6, 46.0], [47.7, 46.0], [47.8, 46.0], [47.9, 46.0], [48.0, 46.0], [48.1, 46.0], [48.2, 46.0], [48.3, 46.0], [48.4, 46.0], [48.5, 46.0], [48.6, 46.0], [48.7, 46.0], [48.8, 46.0], [48.9, 46.0], [49.0, 46.0], [49.1, 46.0], [49.2, 46.0], [49.3, 46.0], [49.4, 46.0], [49.5, 46.0], [49.6, 46.0], [49.7, 46.0], [49.8, 46.0], [49.9, 46.0], [50.0, 46.0], [50.1, 46.0], [50.2, 46.0], [50.3, 46.0], [50.4, 47.0], [50.5, 47.0], [50.6, 47.0], [50.7, 47.0], [50.8, 47.0], [50.9, 47.0], [51.0, 47.0], [51.1, 47.0], [51.2, 47.0], [51.3, 47.0], [51.4, 47.0], [51.5, 47.0], [51.6, 47.0], [51.7, 47.0], [51.8, 47.0], [51.9, 47.0], [52.0, 47.0], [52.1, 47.0], [52.2, 47.0], [52.3, 47.0], [52.4, 47.0], [52.5, 47.0], [52.6, 47.0], [52.7, 47.0], [52.8, 47.0], [52.9, 47.0], [53.0, 47.0], [53.1, 47.0], [53.2, 47.0], [53.3, 47.0], [53.4, 47.0], [53.5, 47.0], [53.6, 47.0], [53.7, 47.0], [53.8, 47.0], [53.9, 47.0], [54.0, 47.0], [54.1, 47.0], [54.2, 47.0], [54.3, 47.0], [54.4, 47.0], [54.5, 47.0], [54.6, 47.0], [54.7, 47.0], [54.8, 47.0], [54.9, 47.0], [55.0, 47.0], [55.1, 47.0], [55.2, 47.0], [55.3, 47.0], [55.4, 47.0], [55.5, 47.0], [55.6, 47.0], [55.7, 47.0], [55.8, 47.0], [55.9, 47.0], [56.0, 47.0], [56.1, 47.0], [56.2, 47.0], [56.3, 47.0], [56.4, 47.0], [56.5, 47.0], [56.6, 47.0], [56.7, 47.0], [56.8, 47.0], [56.9, 47.0], [57.0, 47.0], [57.1, 47.0], [57.2, 47.0], [57.3, 47.0], [57.4, 47.0], [57.5, 47.0], [57.6, 47.0], [57.7, 47.0], [57.8, 47.0], [57.9, 47.0], [58.0, 47.0], [58.1, 47.0], [58.2, 47.0], [58.3, 47.0], [58.4, 47.0], [58.5, 47.0], [58.6, 47.0], [58.7, 47.0], [58.8, 47.0], [58.9, 47.0], [59.0, 47.0], [59.1, 47.0], [59.2, 47.0], [59.3, 47.0], [59.4, 47.0], [59.5, 47.0], [59.6, 47.0], [59.7, 47.0], [59.8, 47.0], [59.9, 47.0], [60.0, 47.0], [60.1, 47.0], [60.2, 47.0], [60.3, 47.0], [60.4, 47.0], [60.5, 47.0], [60.6, 47.0], [60.7, 47.0], [60.8, 47.0], [60.9, 47.0], [61.0, 47.0], [61.1, 47.0], [61.2, 47.0], [61.3, 47.0], [61.4, 47.0], [61.5, 47.0], [61.6, 47.0], [61.7, 47.0], [61.8, 47.0], [61.9, 47.0], [62.0, 47.0], [62.1, 47.0], [62.2, 47.0], [62.3, 47.0], [62.4, 47.0], [62.5, 47.0], [62.6, 47.0], [62.7, 47.0], [62.8, 47.0], [62.9, 47.0], [63.0, 47.0], [63.1, 47.0], [63.2, 47.0], [63.3, 47.0], [63.4, 47.0], [63.5, 47.0], [63.6, 47.0], [63.7, 47.0], [63.8, 47.0], [63.9, 48.0], [64.0, 48.0], [64.1, 48.0], [64.2, 48.0], [64.3, 48.0], [64.4, 48.0], [64.5, 48.0], [64.6, 48.0], [64.7, 48.0], [64.8, 48.0], [64.9, 48.0], [65.0, 48.0], [65.1, 48.0], [65.2, 48.0], [65.3, 48.0], [65.4, 48.0], [65.5, 48.0], [65.6, 48.0], [65.7, 48.0], [65.8, 48.0], [65.9, 48.0], [66.0, 48.0], [66.1, 48.0], [66.2, 48.0], [66.3, 48.0], [66.4, 48.0], [66.5, 48.0], [66.6, 48.0], [66.7, 48.0], [66.8, 48.0], [66.9, 48.0], [67.0, 48.0], [67.1, 48.0], [67.2, 48.0], [67.3, 48.0], [67.4, 48.0], [67.5, 48.0], [67.6, 48.0], [67.7, 48.0], [67.8, 48.0], [67.9, 48.0], [68.0, 48.0], [68.1, 48.0], [68.2, 48.0], [68.3, 48.0], [68.4, 48.0], [68.5, 48.0], [68.6, 48.0], [68.7, 48.0], [68.8, 48.0], [68.9, 48.0], [69.0, 48.0], [69.1, 48.0], [69.2, 48.0], [69.3, 48.0], [69.4, 48.0], [69.5, 48.0], [69.6, 48.0], [69.7, 48.0], [69.8, 48.0], [69.9, 48.0], [70.0, 48.0], [70.1, 48.0], [70.2, 48.0], [70.3, 48.0], [70.4, 48.0], [70.5, 48.0], [70.6, 48.0], [70.7, 48.0], [70.8, 48.0], [70.9, 48.0], [71.0, 48.0], [71.1, 48.0], [71.2, 48.0], [71.3, 48.0], [71.4, 48.0], [71.5, 48.0], [71.6, 48.0], [71.7, 48.0], [71.8, 48.0], [71.9, 48.0], [72.0, 48.0], [72.1, 48.0], [72.2, 48.0], [72.3, 48.0], [72.4, 48.0], [72.5, 48.0], [72.6, 48.0], [72.7, 48.0], [72.8, 48.0], [72.9, 48.0], [73.0, 48.0], [73.1, 48.0], [73.2, 48.0], [73.3, 48.0], [73.4, 48.0], [73.5, 48.0], [73.6, 48.0], [73.7, 48.0], [73.8, 48.0], [73.9, 48.0], [74.0, 48.0], [74.1, 48.0], [74.2, 48.0], [74.3, 48.0], [74.4, 48.0], [74.5, 48.0], [74.6, 48.0], [74.7, 48.0], [74.8, 48.0], [74.9, 48.0], [75.0, 48.0], [75.1, 48.0], [75.2, 48.0], [75.3, 48.0], [75.4, 48.0], [75.5, 48.0], [75.6, 48.0], [75.7, 48.0], [75.8, 49.0], [75.9, 49.0], [76.0, 49.0], [76.1, 49.0], [76.2, 49.0], [76.3, 49.0], [76.4, 49.0], [76.5, 49.0], [76.6, 49.0], [76.7, 49.0], [76.8, 49.0], [76.9, 49.0], [77.0, 49.0], [77.1, 49.0], [77.2, 49.0], [77.3, 49.0], [77.4, 49.0], [77.5, 49.0], [77.6, 49.0], [77.7, 49.0], [77.8, 49.0], [77.9, 49.0], [78.0, 49.0], [78.1, 49.0], [78.2, 49.0], [78.3, 49.0], [78.4, 49.0], [78.5, 49.0], [78.6, 49.0], [78.7, 49.0], [78.8, 49.0], [78.9, 49.0], [79.0, 49.0], [79.1, 49.0], [79.2, 49.0], [79.3, 49.0], [79.4, 49.0], [79.5, 49.0], [79.6, 49.0], [79.7, 49.0], [79.8, 49.0], [79.9, 49.0], [80.0, 49.0], [80.1, 49.0], [80.2, 49.0], [80.3, 49.0], [80.4, 49.0], [80.5, 49.0], [80.6, 49.0], [80.7, 49.0], [80.8, 49.0], [80.9, 49.0], [81.0, 49.0], [81.1, 49.0], [81.2, 49.0], [81.3, 49.0], [81.4, 49.0], [81.5, 49.0], [81.6, 49.0], [81.7, 49.0], [81.8, 49.0], [81.9, 49.0], [82.0, 49.0], [82.1, 49.0], [82.2, 49.0], [82.3, 49.0], [82.4, 49.0], [82.5, 49.0], [82.6, 49.0], [82.7, 49.0], [82.8, 49.0], [82.9, 49.0], [83.0, 49.0], [83.1, 49.0], [83.2, 49.0], [83.3, 50.0], [83.4, 50.0], [83.5, 50.0], [83.6, 50.0], [83.7, 50.0], [83.8, 50.0], [83.9, 50.0], [84.0, 50.0], [84.1, 50.0], [84.2, 50.0], [84.3, 50.0], [84.4, 50.0], [84.5, 50.0], [84.6, 50.0], [84.7, 50.0], [84.8, 50.0], [84.9, 50.0], [85.0, 50.0], [85.1, 50.0], [85.2, 50.0], [85.3, 50.0], [85.4, 50.0], [85.5, 50.0], [85.6, 50.0], [85.7, 50.0], [85.8, 50.0], [85.9, 50.0], [86.0, 50.0], [86.1, 50.0], [86.2, 50.0], [86.3, 50.0], [86.4, 50.0], [86.5, 50.0], [86.6, 50.0], [86.7, 50.0], [86.8, 50.0], [86.9, 50.0], [87.0, 50.0], [87.1, 50.0], [87.2, 50.0], [87.3, 50.0], [87.4, 50.0], [87.5, 50.0], [87.6, 51.0], [87.7, 51.0], [87.8, 51.0], [87.9, 51.0], [88.0, 51.0], [88.1, 51.0], [88.2, 51.0], [88.3, 51.0], [88.4, 51.0], [88.5, 51.0], [88.6, 51.0], [88.7, 51.0], [88.8, 51.0], [88.9, 51.0], [89.0, 51.0], [89.1, 51.0], [89.2, 51.0], [89.3, 51.0], [89.4, 51.0], [89.5, 51.0], [89.6, 51.0], [89.7, 51.0], [89.8, 51.0], [89.9, 51.0], [90.0, 51.0], [90.1, 51.0], [90.2, 52.0], [90.3, 52.0], [90.4, 52.0], [90.5, 52.0], [90.6, 52.0], [90.7, 52.0], [90.8, 52.0], [90.9, 52.0], [91.0, 52.0], [91.1, 52.0], [91.2, 52.0], [91.3, 52.0], [91.4, 52.0], [91.5, 52.0], [91.6, 52.0], [91.7, 52.0], [91.8, 53.0], [91.9, 53.0], [92.0, 53.0], [92.1, 53.0], [92.2, 53.0], [92.3, 53.0], [92.4, 53.0], [92.5, 53.0], [92.6, 53.0], [92.7, 54.0], [92.8, 54.0], [92.9, 54.0], [93.0, 54.0], [93.1, 54.0], [93.2, 54.0], [93.3, 54.0], [93.4, 55.0], [93.5, 55.0], [93.6, 55.0], [93.7, 55.0], [93.8, 55.0], [93.9, 56.0], [94.0, 56.0], [94.1, 56.0], [94.2, 56.0], [94.3, 57.0], [94.4, 57.0], [94.5, 57.0], [94.6, 58.0], [94.7, 58.0], [94.8, 58.0], [94.9, 59.0], [95.0, 59.0], [95.1, 60.0], [95.2, 60.0], [95.3, 61.0], [95.4, 61.0], [95.5, 62.0], [95.6, 63.0], [95.7, 63.0], [95.8, 64.0], [95.9, 65.0], [96.0, 65.0], [96.1, 66.0], [96.2, 67.0], [96.3, 68.0], [96.4, 68.0], [96.5, 69.0], [96.6, 70.0], [96.7, 71.0], [96.8, 72.0], [96.9, 73.0], [97.0, 74.0], [97.1, 74.0], [97.2, 75.0], [97.3, 76.0], [97.4, 77.0], [97.5, 79.0], [97.6, 80.0], [97.7, 81.0], [97.8, 83.0], [97.9, 84.0], [98.0, 85.0], [98.1, 87.0], [98.2, 90.0], [98.3, 93.0], [98.4, 97.0], [98.5, 102.0], [98.6, 106.0], [98.7, 111.0], [98.8, 118.0], [98.9, 127.0], [99.0, 139.0], [99.1, 158.0], [99.2, 191.0], [99.3, 241.0], [99.4, 589.0], [99.5, 681.0], [99.6, 772.0], [99.7, 881.0], [99.8, 971.0], [99.9, 1308.0], [100.0, 7052.0]], "isOverall": false, "label": "Get Votes", "isController": false}, {"data": [[0.0, 95.0], [0.1, 97.0], [0.2, 98.0], [0.3, 98.0], [0.4, 99.0], [0.5, 99.0], [0.6, 99.0], [0.7, 99.0], [0.8, 99.0], [0.9, 100.0], [1.0, 100.0], [1.1, 100.0], [1.2, 100.0], [1.3, 100.0], [1.4, 100.0], [1.5, 100.0], [1.6, 100.0], [1.7, 100.0], [1.8, 100.0], [1.9, 100.0], [2.0, 100.0], [2.1, 100.0], [2.2, 101.0], [2.3, 101.0], [2.4, 101.0], [2.5, 101.0], [2.6, 101.0], [2.7, 101.0], [2.8, 101.0], [2.9, 101.0], [3.0, 101.0], [3.1, 101.0], [3.2, 101.0], [3.3, 101.0], [3.4, 101.0], [3.5, 101.0], [3.6, 101.0], [3.7, 101.0], [3.8, 101.0], [3.9, 101.0], [4.0, 101.0], [4.1, 101.0], [4.2, 102.0], [4.3, 102.0], [4.4, 102.0], [4.5, 102.0], [4.6, 102.0], [4.7, 102.0], [4.8, 102.0], [4.9, 102.0], [5.0, 102.0], [5.1, 102.0], [5.2, 102.0], [5.3, 102.0], [5.4, 102.0], [5.5, 102.0], [5.6, 102.0], [5.7, 102.0], [5.8, 102.0], [5.9, 102.0], [6.0, 102.0], [6.1, 102.0], [6.2, 102.0], [6.3, 102.0], [6.4, 102.0], [6.5, 102.0], [6.6, 102.0], [6.7, 102.0], [6.8, 102.0], [6.9, 102.0], [7.0, 103.0], [7.1, 103.0], [7.2, 103.0], [7.3, 103.0], [7.4, 103.0], [7.5, 103.0], [7.6, 103.0], [7.7, 103.0], [7.8, 103.0], [7.9, 103.0], [8.0, 103.0], [8.1, 103.0], [8.2, 103.0], [8.3, 103.0], [8.4, 103.0], [8.5, 103.0], [8.6, 103.0], [8.7, 103.0], [8.8, 103.0], [8.9, 103.0], [9.0, 103.0], [9.1, 103.0], [9.2, 103.0], [9.3, 103.0], [9.4, 103.0], [9.5, 103.0], [9.6, 103.0], [9.7, 103.0], [9.8, 103.0], [9.9, 103.0], [10.0, 103.0], [10.1, 103.0], [10.2, 103.0], [10.3, 103.0], [10.4, 104.0], [10.5, 104.0], [10.6, 104.0], [10.7, 104.0], [10.8, 104.0], [10.9, 104.0], [11.0, 104.0], [11.1, 104.0], [11.2, 104.0], [11.3, 104.0], [11.4, 104.0], [11.5, 104.0], [11.6, 104.0], [11.7, 104.0], [11.8, 104.0], [11.9, 104.0], [12.0, 104.0], [12.1, 104.0], [12.2, 104.0], [12.3, 104.0], [12.4, 104.0], [12.5, 104.0], [12.6, 104.0], [12.7, 104.0], [12.8, 104.0], [12.9, 104.0], [13.0, 104.0], [13.1, 104.0], [13.2, 104.0], [13.3, 104.0], [13.4, 104.0], [13.5, 104.0], [13.6, 104.0], [13.7, 104.0], [13.8, 104.0], [13.9, 104.0], [14.0, 104.0], [14.1, 104.0], [14.2, 104.0], [14.3, 105.0], [14.4, 105.0], [14.5, 105.0], [14.6, 105.0], [14.7, 105.0], [14.8, 105.0], [14.9, 105.0], [15.0, 105.0], [15.1, 105.0], [15.2, 105.0], [15.3, 105.0], [15.4, 105.0], [15.5, 105.0], [15.6, 105.0], [15.7, 105.0], [15.8, 105.0], [15.9, 105.0], [16.0, 105.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 105.0], [16.5, 105.0], [16.6, 105.0], [16.7, 105.0], [16.8, 105.0], [16.9, 105.0], [17.0, 105.0], [17.1, 105.0], [17.2, 105.0], [17.3, 105.0], [17.4, 105.0], [17.5, 105.0], [17.6, 105.0], [17.7, 105.0], [17.8, 105.0], [17.9, 105.0], [18.0, 105.0], [18.1, 105.0], [18.2, 105.0], [18.3, 105.0], [18.4, 106.0], [18.5, 106.0], [18.6, 106.0], [18.7, 106.0], [18.8, 106.0], [18.9, 106.0], [19.0, 106.0], [19.1, 106.0], [19.2, 106.0], [19.3, 106.0], [19.4, 106.0], [19.5, 106.0], [19.6, 106.0], [19.7, 106.0], [19.8, 106.0], [19.9, 106.0], [20.0, 106.0], [20.1, 106.0], [20.2, 106.0], [20.3, 106.0], [20.4, 106.0], [20.5, 106.0], [20.6, 106.0], [20.7, 106.0], [20.8, 106.0], [20.9, 106.0], [21.0, 106.0], [21.1, 106.0], [21.2, 106.0], [21.3, 106.0], [21.4, 106.0], [21.5, 106.0], [21.6, 106.0], [21.7, 106.0], [21.8, 106.0], [21.9, 106.0], [22.0, 106.0], [22.1, 106.0], [22.2, 106.0], [22.3, 106.0], [22.4, 106.0], [22.5, 106.0], [22.6, 107.0], [22.7, 107.0], [22.8, 107.0], [22.9, 107.0], [23.0, 107.0], [23.1, 107.0], [23.2, 107.0], [23.3, 107.0], [23.4, 107.0], [23.5, 107.0], [23.6, 107.0], [23.7, 107.0], [23.8, 107.0], [23.9, 107.0], [24.0, 107.0], [24.1, 107.0], [24.2, 107.0], [24.3, 107.0], [24.4, 107.0], [24.5, 107.0], [24.6, 107.0], [24.7, 107.0], [24.8, 107.0], [24.9, 107.0], [25.0, 107.0], [25.1, 107.0], [25.2, 107.0], [25.3, 107.0], [25.4, 107.0], [25.5, 107.0], [25.6, 107.0], [25.7, 107.0], [25.8, 107.0], [25.9, 107.0], [26.0, 107.0], [26.1, 107.0], [26.2, 107.0], [26.3, 107.0], [26.4, 107.0], [26.5, 107.0], [26.6, 107.0], [26.7, 107.0], [26.8, 108.0], [26.9, 108.0], [27.0, 108.0], [27.1, 108.0], [27.2, 108.0], [27.3, 108.0], [27.4, 108.0], [27.5, 108.0], [27.6, 108.0], [27.7, 108.0], [27.8, 108.0], [27.9, 108.0], [28.0, 108.0], [28.1, 108.0], [28.2, 108.0], [28.3, 108.0], [28.4, 108.0], [28.5, 108.0], [28.6, 108.0], [28.7, 108.0], [28.8, 108.0], [28.9, 108.0], [29.0, 108.0], [29.1, 108.0], [29.2, 108.0], [29.3, 108.0], [29.4, 108.0], [29.5, 108.0], [29.6, 108.0], [29.7, 108.0], [29.8, 108.0], [29.9, 108.0], [30.0, 108.0], [30.1, 108.0], [30.2, 108.0], [30.3, 108.0], [30.4, 108.0], [30.5, 108.0], [30.6, 108.0], [30.7, 108.0], [30.8, 108.0], [30.9, 108.0], [31.0, 109.0], [31.1, 109.0], [31.2, 109.0], [31.3, 109.0], [31.4, 109.0], [31.5, 109.0], [31.6, 109.0], [31.7, 109.0], [31.8, 109.0], [31.9, 109.0], [32.0, 109.0], [32.1, 109.0], [32.2, 109.0], [32.3, 109.0], [32.4, 109.0], [32.5, 109.0], [32.6, 109.0], [32.7, 109.0], [32.8, 109.0], [32.9, 109.0], [33.0, 109.0], [33.1, 109.0], [33.2, 109.0], [33.3, 109.0], [33.4, 109.0], [33.5, 109.0], [33.6, 109.0], [33.7, 109.0], [33.8, 109.0], [33.9, 109.0], [34.0, 109.0], [34.1, 109.0], [34.2, 109.0], [34.3, 109.0], [34.4, 109.0], [34.5, 109.0], [34.6, 109.0], [34.7, 109.0], [34.8, 109.0], [34.9, 109.0], [35.0, 109.0], [35.1, 110.0], [35.2, 110.0], [35.3, 110.0], [35.4, 110.0], [35.5, 110.0], [35.6, 110.0], [35.7, 110.0], [35.8, 110.0], [35.9, 110.0], [36.0, 110.0], [36.1, 110.0], [36.2, 110.0], [36.3, 110.0], [36.4, 110.0], [36.5, 110.0], [36.6, 110.0], [36.7, 110.0], [36.8, 110.0], [36.9, 110.0], [37.0, 110.0], [37.1, 110.0], [37.2, 110.0], [37.3, 110.0], [37.4, 110.0], [37.5, 110.0], [37.6, 110.0], [37.7, 110.0], [37.8, 110.0], [37.9, 110.0], [38.0, 110.0], [38.1, 110.0], [38.2, 110.0], [38.3, 110.0], [38.4, 110.0], [38.5, 110.0], [38.6, 110.0], [38.7, 110.0], [38.8, 110.0], [38.9, 110.0], [39.0, 110.0], [39.1, 111.0], [39.2, 111.0], [39.3, 111.0], [39.4, 111.0], [39.5, 111.0], [39.6, 111.0], [39.7, 111.0], [39.8, 111.0], [39.9, 111.0], [40.0, 111.0], [40.1, 111.0], [40.2, 111.0], [40.3, 111.0], [40.4, 111.0], [40.5, 111.0], [40.6, 111.0], [40.7, 111.0], [40.8, 111.0], [40.9, 111.0], [41.0, 111.0], [41.1, 111.0], [41.2, 111.0], [41.3, 111.0], [41.4, 111.0], [41.5, 111.0], [41.6, 111.0], [41.7, 111.0], [41.8, 111.0], [41.9, 111.0], [42.0, 111.0], [42.1, 111.0], [42.2, 111.0], [42.3, 111.0], [42.4, 111.0], [42.5, 111.0], [42.6, 111.0], [42.7, 112.0], [42.8, 112.0], [42.9, 112.0], [43.0, 112.0], [43.1, 112.0], [43.2, 112.0], [43.3, 112.0], [43.4, 112.0], [43.5, 112.0], [43.6, 112.0], [43.7, 112.0], [43.8, 112.0], [43.9, 112.0], [44.0, 112.0], [44.1, 112.0], [44.2, 112.0], [44.3, 112.0], [44.4, 112.0], [44.5, 112.0], [44.6, 112.0], [44.7, 112.0], [44.8, 112.0], [44.9, 112.0], [45.0, 112.0], [45.1, 112.0], [45.2, 112.0], [45.3, 112.0], [45.4, 112.0], [45.5, 112.0], [45.6, 112.0], [45.7, 112.0], [45.8, 112.0], [45.9, 112.0], [46.0, 112.0], [46.1, 112.0], [46.2, 113.0], [46.3, 113.0], [46.4, 113.0], [46.5, 113.0], [46.6, 113.0], [46.7, 113.0], [46.8, 113.0], [46.9, 113.0], [47.0, 113.0], [47.1, 113.0], [47.2, 113.0], [47.3, 113.0], [47.4, 113.0], [47.5, 113.0], [47.6, 113.0], [47.7, 113.0], [47.8, 113.0], [47.9, 113.0], [48.0, 113.0], [48.1, 113.0], [48.2, 113.0], [48.3, 113.0], [48.4, 113.0], [48.5, 113.0], [48.6, 113.0], [48.7, 113.0], [48.8, 113.0], [48.9, 113.0], [49.0, 113.0], [49.1, 113.0], [49.2, 113.0], [49.3, 113.0], [49.4, 113.0], [49.5, 114.0], [49.6, 114.0], [49.7, 114.0], [49.8, 114.0], [49.9, 114.0], [50.0, 114.0], [50.1, 114.0], [50.2, 114.0], [50.3, 114.0], [50.4, 114.0], [50.5, 114.0], [50.6, 114.0], [50.7, 114.0], [50.8, 114.0], [50.9, 114.0], [51.0, 114.0], [51.1, 114.0], [51.2, 114.0], [51.3, 114.0], [51.4, 114.0], [51.5, 114.0], [51.6, 114.0], [51.7, 114.0], [51.8, 114.0], [51.9, 114.0], [52.0, 114.0], [52.1, 114.0], [52.2, 114.0], [52.3, 114.0], [52.4, 114.0], [52.5, 114.0], [52.6, 115.0], [52.7, 115.0], [52.8, 115.0], [52.9, 115.0], [53.0, 115.0], [53.1, 115.0], [53.2, 115.0], [53.3, 115.0], [53.4, 115.0], [53.5, 115.0], [53.6, 115.0], [53.7, 115.0], [53.8, 115.0], [53.9, 115.0], [54.0, 115.0], [54.1, 115.0], [54.2, 115.0], [54.3, 115.0], [54.4, 115.0], [54.5, 115.0], [54.6, 115.0], [54.7, 115.0], [54.8, 115.0], [54.9, 115.0], [55.0, 115.0], [55.1, 115.0], [55.2, 115.0], [55.3, 115.0], [55.4, 116.0], [55.5, 116.0], [55.6, 116.0], [55.7, 116.0], [55.8, 116.0], [55.9, 116.0], [56.0, 116.0], [56.1, 116.0], [56.2, 116.0], [56.3, 116.0], [56.4, 116.0], [56.5, 116.0], [56.6, 116.0], [56.7, 116.0], [56.8, 116.0], [56.9, 116.0], [57.0, 116.0], [57.1, 116.0], [57.2, 116.0], [57.3, 116.0], [57.4, 116.0], [57.5, 116.0], [57.6, 116.0], [57.7, 116.0], [57.8, 116.0], [57.9, 116.0], [58.0, 117.0], [58.1, 117.0], [58.2, 117.0], [58.3, 117.0], [58.4, 117.0], [58.5, 117.0], [58.6, 117.0], [58.7, 117.0], [58.8, 117.0], [58.9, 117.0], [59.0, 117.0], [59.1, 117.0], [59.2, 117.0], [59.3, 117.0], [59.4, 117.0], [59.5, 117.0], [59.6, 117.0], [59.7, 117.0], [59.8, 117.0], [59.9, 117.0], [60.0, 117.0], [60.1, 117.0], [60.2, 117.0], [60.3, 118.0], [60.4, 118.0], [60.5, 118.0], [60.6, 118.0], [60.7, 118.0], [60.8, 118.0], [60.9, 118.0], [61.0, 118.0], [61.1, 118.0], [61.2, 118.0], [61.3, 118.0], [61.4, 118.0], [61.5, 118.0], [61.6, 118.0], [61.7, 118.0], [61.8, 118.0], [61.9, 118.0], [62.0, 118.0], [62.1, 118.0], [62.2, 118.0], [62.3, 118.0], [62.4, 118.0], [62.5, 119.0], [62.6, 119.0], [62.7, 119.0], [62.8, 119.0], [62.9, 119.0], [63.0, 119.0], [63.1, 119.0], [63.2, 119.0], [63.3, 119.0], [63.4, 119.0], [63.5, 119.0], [63.6, 119.0], [63.7, 119.0], [63.8, 119.0], [63.9, 119.0], [64.0, 119.0], [64.1, 119.0], [64.2, 119.0], [64.3, 119.0], [64.4, 119.0], [64.5, 119.0], [64.6, 120.0], [64.7, 120.0], [64.8, 120.0], [64.9, 120.0], [65.0, 120.0], [65.1, 120.0], [65.2, 120.0], [65.3, 120.0], [65.4, 120.0], [65.5, 120.0], [65.6, 120.0], [65.7, 120.0], [65.8, 120.0], [65.9, 120.0], [66.0, 120.0], [66.1, 120.0], [66.2, 120.0], [66.3, 120.0], [66.4, 121.0], [66.5, 121.0], [66.6, 121.0], [66.7, 121.0], [66.8, 121.0], [66.9, 121.0], [67.0, 121.0], [67.1, 121.0], [67.2, 121.0], [67.3, 121.0], [67.4, 121.0], [67.5, 121.0], [67.6, 121.0], [67.7, 121.0], [67.8, 121.0], [67.9, 121.0], [68.0, 121.0], [68.1, 121.0], [68.2, 122.0], [68.3, 122.0], [68.4, 122.0], [68.5, 122.0], [68.6, 122.0], [68.7, 122.0], [68.8, 122.0], [68.9, 122.0], [69.0, 122.0], [69.1, 122.0], [69.2, 122.0], [69.3, 122.0], [69.4, 122.0], [69.5, 122.0], [69.6, 122.0], [69.7, 122.0], [69.8, 123.0], [69.9, 123.0], [70.0, 123.0], [70.1, 123.0], [70.2, 123.0], [70.3, 123.0], [70.4, 123.0], [70.5, 123.0], [70.6, 123.0], [70.7, 123.0], [70.8, 123.0], [70.9, 123.0], [71.0, 123.0], [71.1, 123.0], [71.2, 124.0], [71.3, 124.0], [71.4, 124.0], [71.5, 124.0], [71.6, 124.0], [71.7, 124.0], [71.8, 124.0], [71.9, 124.0], [72.0, 124.0], [72.1, 124.0], [72.2, 124.0], [72.3, 124.0], [72.4, 124.0], [72.5, 124.0], [72.6, 125.0], [72.7, 125.0], [72.8, 125.0], [72.9, 125.0], [73.0, 125.0], [73.1, 125.0], [73.2, 125.0], [73.3, 125.0], [73.4, 125.0], [73.5, 125.0], [73.6, 125.0], [73.7, 125.0], [73.8, 125.0], [73.9, 126.0], [74.0, 126.0], [74.1, 126.0], [74.2, 126.0], [74.3, 126.0], [74.4, 126.0], [74.5, 126.0], [74.6, 126.0], [74.7, 126.0], [74.8, 126.0], [74.9, 126.0], [75.0, 126.0], [75.1, 127.0], [75.2, 127.0], [75.3, 127.0], [75.4, 127.0], [75.5, 127.0], [75.6, 127.0], [75.7, 127.0], [75.8, 127.0], [75.9, 127.0], [76.0, 127.0], [76.1, 127.0], [76.2, 128.0], [76.3, 128.0], [76.4, 128.0], [76.5, 128.0], [76.6, 128.0], [76.7, 128.0], [76.8, 128.0], [76.9, 128.0], [77.0, 128.0], [77.1, 128.0], [77.2, 129.0], [77.3, 129.0], [77.4, 129.0], [77.5, 129.0], [77.6, 129.0], [77.7, 129.0], [77.8, 129.0], [77.9, 129.0], [78.0, 129.0], [78.1, 130.0], [78.2, 130.0], [78.3, 130.0], [78.4, 130.0], [78.5, 130.0], [78.6, 130.0], [78.7, 130.0], [78.8, 130.0], [78.9, 131.0], [79.0, 131.0], [79.1, 131.0], [79.2, 131.0], [79.3, 131.0], [79.4, 131.0], [79.5, 131.0], [79.6, 131.0], [79.7, 132.0], [79.8, 132.0], [79.9, 132.0], [80.0, 132.0], [80.1, 132.0], [80.2, 132.0], [80.3, 132.0], [80.4, 133.0], [80.5, 133.0], [80.6, 133.0], [80.7, 133.0], [80.8, 133.0], [80.9, 133.0], [81.0, 133.0], [81.1, 134.0], [81.2, 134.0], [81.3, 134.0], [81.4, 134.0], [81.5, 134.0], [81.6, 134.0], [81.7, 135.0], [81.8, 135.0], [81.9, 135.0], [82.0, 135.0], [82.1, 135.0], [82.2, 135.0], [82.3, 136.0], [82.4, 136.0], [82.5, 136.0], [82.6, 136.0], [82.7, 136.0], [82.8, 136.0], [82.9, 137.0], [83.0, 137.0], [83.1, 137.0], [83.2, 137.0], [83.3, 138.0], [83.4, 138.0], [83.5, 138.0], [83.6, 138.0], [83.7, 138.0], [83.8, 139.0], [83.9, 139.0], [84.0, 139.0], [84.1, 139.0], [84.2, 139.0], [84.3, 140.0], [84.4, 140.0], [84.5, 140.0], [84.6, 140.0], [84.7, 141.0], [84.8, 141.0], [84.9, 141.0], [85.0, 141.0], [85.1, 142.0], [85.2, 142.0], [85.3, 142.0], [85.4, 142.0], [85.5, 143.0], [85.6, 143.0], [85.7, 143.0], [85.8, 144.0], [85.9, 144.0], [86.0, 144.0], [86.1, 145.0], [86.2, 145.0], [86.3, 145.0], [86.4, 145.0], [86.5, 146.0], [86.6, 146.0], [86.7, 146.0], [86.8, 147.0], [86.9, 147.0], [87.0, 147.0], [87.1, 148.0], [87.2, 148.0], [87.3, 149.0], [87.4, 149.0], [87.5, 149.0], [87.6, 150.0], [87.7, 150.0], [87.8, 150.0], [87.9, 151.0], [88.0, 151.0], [88.1, 152.0], [88.2, 152.0], [88.3, 152.0], [88.4, 153.0], [88.5, 153.0], [88.6, 154.0], [88.7, 154.0], [88.8, 155.0], [88.9, 155.0], [89.0, 156.0], [89.1, 156.0], [89.2, 157.0], [89.3, 157.0], [89.4, 158.0], [89.5, 158.0], [89.6, 159.0], [89.7, 159.0], [89.8, 160.0], [89.9, 160.0], [90.0, 161.0], [90.1, 161.0], [90.2, 162.0], [90.3, 163.0], [90.4, 163.0], [90.5, 164.0], [90.6, 165.0], [90.7, 165.0], [90.8, 166.0], [90.9, 166.0], [91.0, 167.0], [91.1, 168.0], [91.2, 168.0], [91.3, 169.0], [91.4, 170.0], [91.5, 170.0], [91.6, 171.0], [91.7, 172.0], [91.8, 172.0], [91.9, 173.0], [92.0, 174.0], [92.1, 175.0], [92.2, 175.0], [92.3, 176.0], [92.4, 177.0], [92.5, 178.0], [92.6, 179.0], [92.7, 180.0], [92.8, 180.0], [92.9, 181.0], [93.0, 182.0], [93.1, 183.0], [93.2, 184.0], [93.3, 185.0], [93.4, 186.0], [93.5, 187.0], [93.6, 188.0], [93.7, 188.0], [93.8, 189.0], [93.9, 190.0], [94.0, 192.0], [94.1, 193.0], [94.2, 194.0], [94.3, 195.0], [94.4, 196.0], [94.5, 198.0], [94.6, 199.0], [94.7, 200.0], [94.8, 201.0], [94.9, 203.0], [95.0, 204.0], [95.1, 205.0], [95.2, 207.0], [95.3, 208.0], [95.4, 210.0], [95.5, 212.0], [95.6, 214.0], [95.7, 215.0], [95.8, 217.0], [95.9, 219.0], [96.0, 221.0], [96.1, 223.0], [96.2, 226.0], [96.3, 228.0], [96.4, 230.0], [96.5, 233.0], [96.6, 235.0], [96.7, 238.0], [96.8, 241.0], [96.9, 244.0], [97.0, 248.0], [97.1, 252.0], [97.2, 256.0], [97.3, 261.0], [97.4, 267.0], [97.5, 273.0], [97.6, 280.0], [97.7, 288.0], [97.8, 300.0], [97.9, 311.0], [98.0, 325.0], [98.1, 338.0], [98.2, 352.0], [98.3, 368.0], [98.4, 388.0], [98.5, 408.0], [98.6, 433.0], [98.7, 466.0], [98.8, 514.0], [98.9, 585.0], [99.0, 661.0], [99.1, 731.0], [99.2, 786.0], [99.3, 847.0], [99.4, 927.0], [99.5, 1011.0], [99.6, 1092.0], [99.7, 1164.0], [99.8, 1793.0], [99.9, 3689.0]], "isOverall": false, "label": "Send Vote", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 181076.0, "series": [{"data": [[0.0, 181076.0], [600.0, 205.0], [700.0, 198.0], [800.0, 176.0], [900.0, 188.0], [1000.0, 128.0], [1100.0, 9.0], [1200.0, 6.0], [1300.0, 7.0], [1400.0, 1.0], [1500.0, 7.0], [100.0, 1422.0], [1600.0, 14.0], [1700.0, 27.0], [1800.0, 38.0], [1900.0, 23.0], [2000.0, 13.0], [2100.0, 2.0], [2200.0, 1.0], [2300.0, 1.0], [2600.0, 2.0], [2800.0, 4.0], [2700.0, 1.0], [2900.0, 7.0], [200.0, 207.0], [3700.0, 9.0], [3600.0, 1.0], [3800.0, 7.0], [3900.0, 8.0], [4000.0, 1.0], [4200.0, 1.0], [300.0, 51.0], [4700.0, 2.0], [400.0, 17.0], [6900.0, 5.0], [7000.0, 2.0], [500.0, 63.0]], "isOverall": false, "label": "Get Votes", "isController": false}, {"data": [[0.0, 1620.0], [600.0, 237.0], [700.0, 320.0], [800.0, 269.0], [900.0, 214.0], [1000.0, 224.0], [1100.0, 207.0], [1200.0, 32.0], [1300.0, 18.0], [1400.0, 18.0], [1500.0, 16.0], [1600.0, 30.0], [1700.0, 37.0], [1800.0, 37.0], [1900.0, 32.0], [2000.0, 29.0], [2100.0, 12.0], [2200.0, 12.0], [2300.0, 1.0], [2400.0, 5.0], [2500.0, 2.0], [2600.0, 6.0], [2800.0, 3.0], [2700.0, 3.0], [2900.0, 3.0], [3000.0, 10.0], [3100.0, 18.0], [3300.0, 2.0], [3500.0, 1.0], [3600.0, 4.0], [3700.0, 7.0], [3800.0, 6.0], [3900.0, 11.0], [4000.0, 12.0], [4100.0, 3.0], [4300.0, 7.0], [4400.0, 2.0], [4800.0, 13.0], [4900.0, 33.0], [5100.0, 12.0], [5000.0, 39.0], [5200.0, 2.0], [5300.0, 3.0], [5600.0, 6.0], [5700.0, 3.0], [5800.0, 11.0], [6100.0, 5.0], [5900.0, 1.0], [6300.0, 1.0], [6900.0, 1.0], [7100.0, 4.0], [7000.0, 1.0], [100.0, 172501.0], [200.0, 5773.0], [300.0, 1213.0], [400.0, 575.0], [500.0, 275.0]], "isOverall": false, "label": "Send Vote", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 622.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 364459.0, "series": [{"data": [[0.0, 364459.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2791.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 622.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.96294910179639, "minX": 1.56474732E12, "maxY": 20.0, "series": [{"data": [[1.5647487E12, 20.0], [1.56474768E12, 20.0], [1.564749E12, 20.0], [1.56474738E12, 20.0], [1.5647481E12, 20.0], [1.5647478E12, 20.0], [1.5647484E12, 20.0], [1.5647475E12, 20.0], [1.56474756E12, 20.0], [1.56474816E12, 20.0], [1.56474786E12, 20.0], [1.56474858E12, 20.0], [1.56474888E12, 20.0], [1.56474798E12, 20.0], [1.56474828E12, 20.0], [1.56474834E12, 20.0], [1.56474864E12, 20.0], [1.56474774E12, 20.0], [1.56474804E12, 20.0], [1.56474906E12, 20.0], [1.56474846E12, 20.0], [1.56474744E12, 20.0], [1.56474876E12, 20.0], [1.56474882E12, 20.0], [1.56474912E12, 19.967187191144504], [1.56474822E12, 20.0], [1.56474852E12, 20.0], [1.56474732E12, 18.96294910179639], [1.56474894E12, 20.0], [1.56474792E12, 20.0], [1.56474762E12, 20.0]], "isOverall": false, "label": "Performance Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56474912E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 47.99999999999999, "minX": 2.0, "maxY": 437.6, "series": [{"data": [[2.0, 62.0], [8.0, 437.6], [9.0, 74.14285714285714], [10.0, 48.15625], [11.0, 49.21875000000001], [3.0, 67.75], [12.0, 53.666666666666664], [13.0, 157.4375], [14.0, 75.09523809523809], [15.0, 49.18604651162791], [4.0, 53.25], [16.0, 48.3469387755102], [17.0, 48.75555555555555], [18.0, 48.745454545454535], [19.0, 47.99999999999999], [5.0, 175.25000000000003], [20.0, 55.19527801092192], [6.0, 134.07142857142858], [7.0, 55.45454545454545]], "isOverall": false, "label": "Get Votes", "isController": false}, {"data": [[19.984760506714434, 55.22281302669536]], "isOverall": false, "label": "Get Votes-Aggregated", "isController": false}, {"data": [[2.0, 217.6], [8.0, 392.2], [9.0, 152.29166666666669], [10.0, 119.72413793103449], [11.0, 116.36363636363635], [3.0, 170.0], [12.0, 110.17647058823529], [13.0, 287.2631578947369], [14.0, 135.1463414634146], [15.0, 131.02500000000006], [4.0, 109.85714285714285], [16.0, 112.1875], [17.0, 121.92156862745097], [18.0, 117.30000000000003], [19.0, 158.10416666666666], [5.0, 110.88888888888889], [20.0, 139.51108543524163], [6.0, 206.53846153846155], [7.0, 115.78571428571428]], "isOverall": false, "label": "Send Vote", "isController": false}, {"data": [[19.984206978286384, 139.51224298963572]], "isOverall": false, "label": "Send Vote-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 20.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14190.416666666666, "minX": 1.56474732E12, "maxY": 75373.46666666666, "series": [{"data": [[1.5647487E12, 58254.066666666666], [1.56474768E12, 71847.9], [1.564749E12, 51679.76666666667], [1.56474738E12, 68937.33333333333], [1.5647481E12, 62708.7], [1.5647478E12, 59137.96666666667], [1.5647484E12, 53628.76666666667], [1.5647475E12, 56738.46666666667], [1.56474756E12, 67384.9], [1.56474816E12, 72044.43333333333], [1.56474786E12, 69129.03333333334], [1.56474858E12, 73772.76666666666], [1.56474888E12, 67466.93333333333], [1.56474798E12, 74822.5], [1.56474828E12, 70493.73333333334], [1.56474834E12, 73103.8], [1.56474864E12, 72994.56666666667], [1.56474774E12, 69297.93333333333], [1.56474804E12, 71548.73333333334], [1.56474906E12, 69011.03333333334], [1.56474846E12, 69959.43333333333], [1.56474744E12, 71710.6], [1.56474876E12, 66312.36666666667], [1.56474882E12, 63599.63333333333], [1.56474912E12, 27708.833333333332], [1.56474822E12, 66412.36666666667], [1.56474852E12, 68358.3], [1.56474732E12, 29280.133333333335], [1.56474894E12, 70767.9], [1.56474792E12, 75373.46666666666], [1.56474762E12, 73644.23333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5647487E12, 29799.883333333335], [1.56474768E12, 36736.46666666667], [1.564749E12, 26434.3], [1.56474738E12, 35226.316666666666], [1.5647481E12, 32033.083333333332], [1.5647478E12, 30229.566666666666], [1.5647484E12, 27437.4], [1.5647475E12, 29013.966666666667], [1.56474756E12, 34445.816666666666], [1.56474816E12, 36854.566666666666], [1.56474786E12, 35328.76666666667], [1.56474858E12, 37716.083333333336], [1.56474888E12, 34492.183333333334], [1.56474798E12, 38259.35], [1.56474828E12, 36039.63333333333], [1.56474834E12, 37374.066666666666], [1.56474864E12, 37309.26666666667], [1.56474774E12, 35437.083333333336], [1.56474804E12, 36590.05], [1.56474906E12, 35270.6], [1.56474846E12, 35759.85], [1.56474744E12, 36670.61666666667], [1.56474876E12, 33908.583333333336], [1.56474882E12, 32490.75], [1.56474912E12, 14190.416666666666], [1.56474822E12, 33933.15], [1.56474852E12, 34941.316666666666], [1.56474732E12, 14986.966666666667], [1.56474894E12, 36179.85], [1.56474792E12, 38543.26666666667], [1.56474762E12, 37643.683333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56474912E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 48.71347497089639, "minX": 1.56474732E12, "maxY": 196.8600805596774, "series": [{"data": [[1.5647487E12, 54.94444444444434], [1.56474768E12, 52.8754388642954], [1.564749E12, 57.15219698577796], [1.56474738E12, 56.761609414758304], [1.5647481E12, 50.541513721377385], [1.5647478E12, 58.32597811978484], [1.5647484E12, 71.87581833060545], [1.5647475E12, 63.933114247052046], [1.56474756E12, 56.49259560618399], [1.56474816E12, 52.43901324805828], [1.56474786E12, 55.08437747819202], [1.56474858E12, 51.790694217333105], [1.56474888E12, 53.9291287386217], [1.56474798E12, 50.39240691879212], [1.56474828E12, 56.54029247044179], [1.56474834E12, 51.91119111911186], [1.56474864E12, 52.95343247709174], [1.56474774E12, 54.84219689775238], [1.56474804E12, 52.53456998313664], [1.56474906E12, 56.54829996822367], [1.56474846E12, 54.65501567398125], [1.56474744E12, 51.11364331599879], [1.56474876E12, 58.3008600727755], [1.56474882E12, 63.57204412271627], [1.56474912E12, 62.25396196513475], [1.56474822E12, 61.03334433806536], [1.56474852E12, 52.4117741418031], [1.56474732E12, 59.89130434782618], [1.56474894E12, 54.233224856655774], [1.56474792E12, 48.71347497089639], [1.56474762E12, 49.864949374627784]], "isOverall": false, "label": "Get Votes", "isController": false}, {"data": [[1.5647487E12, 170.7053403535161], [1.56474768E12, 129.57698763924924], [1.564749E12, 196.8600805596774], [1.56474738E12, 133.7191082802553], [1.5647481E12, 158.55981783149466], [1.5647478E12, 164.40660359859015], [1.5647484E12, 172.47375944455814], [1.5647475E12, 167.36031684698565], [1.56474756E12, 138.331271365782], [1.56474816E12, 129.92139273224876], [1.56474786E12, 135.18288617240805], [1.56474858E12, 125.74520588672472], [1.56474888E12, 141.09704161248342], [1.56474798E12, 124.99794871794894], [1.56474828E12, 129.64374611076622], [1.56474834E12, 127.65886588658827], [1.56474864E12, 127.22621373816342], [1.56474774E12, 134.01724137931035], [1.56474804E12, 131.05453431372524], [1.56474906E12, 133.6665606614731], [1.56474846E12, 133.29449584444117], [1.56474744E12, 131.85402017731576], [1.56474876E12, 139.6898660935692], [1.56474882E12, 142.72854429286872], [1.56474912E12, 161.33570019723874], [1.56474822E12, 136.82377252438425], [1.56474852E12, 139.7178623013968], [1.56474732E12, 140.44095665171892], [1.56474894E12, 131.2141639547495], [1.56474792E12, 125.24098312972664], [1.56474762E12, 128.47683598987078]], "isOverall": false, "label": "Send Vote", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56474912E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 48.64726426076846, "minX": 1.56474732E12, "maxY": 196.85965656137375, "series": [{"data": [[1.5647487E12, 54.878719397363355], [1.56474768E12, 52.8087314913752], [1.564749E12, 57.10273827212908], [1.56474738E12, 56.67557251908397], [1.5647481E12, 50.49571753190014], [1.5647478E12, 58.268310773224584], [1.5647484E12, 71.82733224222565], [1.5647475E12, 63.86680842837806], [1.56474756E12, 56.41041497152152], [1.56474816E12, 52.36348408710212], [1.56474786E12, 55.01792228390167], [1.56474858E12, 51.731678311282984], [1.56474888E12, 53.85907022106636], [1.56474798E12, 50.341395485194944], [1.56474828E12, 56.47713130056015], [1.56474834E12, 51.81128112811281], [1.56474864E12, 52.89695057833855], [1.56474774E12, 54.78885723330165], [1.56474804E12, 52.46037099494094], [1.56474906E12, 56.46949475691128], [1.56474846E12, 54.59811912225709], [1.56474744E12, 51.04190884062392], [1.56474876E12, 58.224611313265015], [1.56474882E12, 63.52568079972424], [1.56474912E12, 62.168779714738584], [1.56474822E12, 60.95576097722011], [1.56474852E12, 52.34183509785057], [1.56474732E12, 59.80959520239869], [1.56474894E12, 54.1551216488454], [1.56474792E12, 48.64726426076846], [1.56474762E12, 49.81149493746302]], "isOverall": false, "label": "Get Votes", "isController": false}, {"data": [[1.5647487E12, 170.7051523128998], [1.56474768E12, 129.57607202807884], [1.564749E12, 196.85965656137375], [1.56474738E12, 133.7189490445854], [1.5647481E12, 158.5592923454194], [1.5647478E12, 164.40623260990566], [1.5647484E12, 172.47253420461493], [1.5647475E12, 167.35973724884064], [1.56474756E12, 138.33094579195864], [1.56474816E12, 129.9204804622171], [1.56474786E12, 135.18240990633484], [1.56474858E12, 125.74475992269954], [1.56474888E12, 141.0962288686602], [1.56474798E12, 124.99721611721633], [1.56474828E12, 129.6432794026133], [1.56474834E12, 127.65841584158437], [1.56474864E12, 127.22561250563645], [1.56474774E12, 134.01645049035105], [1.56474804E12, 131.05392156862732], [1.56474906E12, 133.66608363809794], [1.56474846E12, 133.2933981496003], [1.56474744E12, 131.85325588505032], [1.56474876E12, 139.6892048272436], [1.56474882E12, 142.7280262476264], [1.56474912E12, 161.3345167652864], [1.56474822E12, 136.82344189122162], [1.56474852E12, 139.7170598619803], [1.56474732E12, 140.43796711509694], [1.56474894E12, 131.2129242212927], [1.56474792E12, 125.2405468295525], [1.56474762E12, 128.4763890957849]], "isOverall": false, "label": "Send Vote", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56474912E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.56474732E12, "maxY": 45.260749506903316, "series": [{"data": [[1.5647487E12, 0.22787193973634845], [1.56474768E12, 0.005342695771637908], [1.564749E12, 0.4289959668860124], [1.56474738E12, 0.04643765903307896], [1.5647481E12, 0.13057157839538533], [1.5647478E12, 0.1644724643055807], [1.5647484E12, 0.25000000000000017], [1.5647475E12, 0.22907403827566217], [1.56474756E12, 0.006183889340927587], [1.56474816E12, 0.01142074006395614], [1.56474786E12, 0.06328310864393302], [1.56474858E12, 0.0], [1.56474888E12, 0.06810793237971399], [1.56474798E12, 0.0], [1.56474828E12, 0.011667703795892942], [1.56474834E12, 0.010801080108010818], [1.56474864E12, 0.0], [1.56474774E12, 0.01155428933206711], [1.56474804E12, 0.0], [1.56474906E12, 0.011439466158245974], [1.56474846E12, 0.04482758620689646], [1.56474744E12, 0.0], [1.56474876E12, 0.04283824015878262], [1.56474882E12, 0.14650120648052434], [1.56474912E12, 0.14817749603803465], [1.56474822E12, 0.012545394519643469], [1.56474852E12, 0.08453641321783792], [1.56474732E12, 0.0], [1.56474894E12, 0.005888733922206729], [1.56474792E12, 0.0], [1.56474762E12, 0.0]], "isOverall": false, "label": "Get Votes", "isController": false}, {"data": [[1.5647487E12, 37.002444528018046], [1.56474768E12, 37.03586143750964], [1.564749E12, 37.217299130803326], [1.56474738E12, 37.14872611464931], [1.5647481E12, 37.048169556839945], [1.5647478E12, 37.14987942867735], [1.5647484E12, 37.2311619358791], [1.5647475E12, 37.11186244204042], [1.56474756E12, 37.68565847305877], [1.56474816E12, 37.27413714459488], [1.56474786E12, 39.87664708683916], [1.56474858E12, 36.96328229522816], [1.56474888E12, 37.79242522756834], [1.56474798E12, 37.34109890109889], [1.56474828E12, 37.298226509023124], [1.56474834E12, 37.43609360936103], [1.56474864E12, 36.90921388847134], [1.56474774E12, 36.75988611198986], [1.56474804E12, 37.71078431372544], [1.56474906E12, 37.92796947050402], [1.56474846E12, 37.822173435784784], [1.56474744E12, 37.97982268419451], [1.56474876E12, 37.44519755331457], [1.56474882E12, 36.97202555689873], [1.56474912E12, 45.260749506903316], [1.56474822E12, 39.92511158869231], [1.56474852E12, 37.2176215695715], [1.56474732E12, 36.765695067264566], [1.56474894E12, 37.33844723384467], [1.56474792E12, 37.15983129726572], [1.56474762E12, 36.86265455087148]], "isOverall": false, "label": "Send Vote", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56474912E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 41.0, "minX": 1.56474732E12, "maxY": 7178.0, "series": [{"data": [[1.5647487E12, 5222.0], [1.56474768E12, 3140.0], [1.564749E12, 5943.0], [1.56474738E12, 3159.0], [1.5647481E12, 5100.0], [1.5647478E12, 5078.0], [1.5647484E12, 7139.0], [1.5647475E12, 5229.0], [1.56474756E12, 7178.0], [1.56474816E12, 2188.0], [1.56474786E12, 7118.0], [1.56474858E12, 1990.0], [1.56474888E12, 3189.0], [1.56474798E12, 1619.0], [1.56474828E12, 2567.0], [1.56474834E12, 2080.0], [1.56474864E12, 1846.0], [1.56474774E12, 2101.0], [1.56474804E12, 1827.0], [1.56474906E12, 2700.0], [1.56474846E12, 4014.0], [1.56474744E12, 1873.0], [1.56474876E12, 2939.0], [1.56474882E12, 5035.0], [1.56474912E12, 3805.0], [1.56474822E12, 3301.0], [1.56474852E12, 6199.0], [1.56474732E12, 1750.0], [1.56474894E12, 2158.0], [1.56474792E12, 1134.0], [1.56474762E12, 1472.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5647487E12, 41.0], [1.56474768E12, 41.0], [1.564749E12, 41.0], [1.56474738E12, 41.0], [1.5647481E12, 41.0], [1.5647478E12, 41.0], [1.5647484E12, 42.0], [1.5647475E12, 41.0], [1.56474756E12, 41.0], [1.56474816E12, 41.0], [1.56474786E12, 41.0], [1.56474858E12, 41.0], [1.56474888E12, 41.0], [1.56474798E12, 41.0], [1.56474828E12, 41.0], [1.56474834E12, 41.0], [1.56474864E12, 41.0], [1.56474774E12, 41.0], [1.56474804E12, 41.0], [1.56474906E12, 41.0], [1.56474846E12, 41.0], [1.56474744E12, 41.0], [1.56474876E12, 41.0], [1.56474882E12, 41.0], [1.56474912E12, 41.0], [1.56474822E12, 42.0], [1.56474852E12, 41.0], [1.56474732E12, 41.0], [1.56474894E12, 41.0], [1.56474792E12, 41.0], [1.56474762E12, 41.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5647487E12, 136.0], [1.56474768E12, 134.0], [1.564749E12, 155.0], [1.56474738E12, 132.0], [1.5647481E12, 137.0], [1.5647478E12, 144.0], [1.5647484E12, 135.0], [1.5647475E12, 139.0], [1.56474756E12, 136.0], [1.56474816E12, 130.0], [1.56474786E12, 128.0], [1.56474858E12, 130.0], [1.56474888E12, 133.0], [1.56474798E12, 126.0], [1.56474828E12, 130.0], [1.56474834E12, 129.0], [1.56474864E12, 128.0], [1.56474774E12, 131.0], [1.56474804E12, 132.0], [1.56474906E12, 133.0], [1.56474846E12, 133.0], [1.56474744E12, 133.0], [1.56474876E12, 130.0], [1.56474882E12, 130.0], [1.56474912E12, 171.0], [1.56474822E12, 140.0], [1.56474852E12, 139.0], [1.56474732E12, 136.0], [1.56474894E12, 128.0], [1.56474792E12, 130.0], [1.56474762E12, 130.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5647487E12, 804.7099999999991], [1.56474768E12, 289.90000000000146], [1.564749E12, 1040.0999999999913], [1.56474738E12, 429.3099999999995], [1.5647481E12, 570.380000000001], [1.5647478E12, 662.4499999999989], [1.5647484E12, 730.2799999999988], [1.5647475E12, 786.0], [1.56474756E12, 435.1000000000058], [1.56474816E12, 271.1999999999971], [1.56474786E12, 587.3000000000247], [1.56474858E12, 253.0], [1.56474888E12, 383.0], [1.56474798E12, 250.0], [1.56474828E12, 347.8600000000006], [1.56474834E12, 272.34000000000015], [1.56474864E12, 271.8899999999994], [1.56474774E12, 517.5400000000009], [1.56474804E12, 307.0], [1.56474906E12, 397.47999999999956], [1.56474846E12, 295.4200000000001], [1.56474744E12, 253.1900000000005], [1.56474876E12, 688.2399999999943], [1.56474882E12, 830.8399999999929], [1.56474912E12, 454.3999999999978], [1.56474822E12, 609.7600000000002], [1.56474852E12, 274.0], [1.56474732E12, 845.7000000000025], [1.56474894E12, 508.72000000000116], [1.56474792E12, 245.0], [1.56474762E12, 281.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5647487E12, 185.0], [1.56474768E12, 157.0], [1.564749E12, 214.0], [1.56474738E12, 160.0], [1.5647481E12, 178.0], [1.5647478E12, 204.0], [1.5647484E12, 190.0], [1.5647475E12, 196.5], [1.56474756E12, 168.0], [1.56474816E12, 157.0], [1.56474786E12, 153.0], [1.56474858E12, 151.0], [1.56474888E12, 168.0], [1.56474798E12, 146.0], [1.56474828E12, 160.0], [1.56474834E12, 152.0], [1.56474864E12, 153.0], [1.56474774E12, 165.0], [1.56474804E12, 159.0], [1.56474906E12, 166.0], [1.56474846E12, 163.0], [1.56474744E12, 161.0], [1.56474876E12, 169.0], [1.56474882E12, 166.0], [1.56474912E12, 203.0], [1.56474822E12, 172.0], [1.56474852E12, 171.0], [1.56474732E12, 173.0], [1.56474894E12, 161.0], [1.56474792E12, 157.0], [1.56474762E12, 155.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56474912E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 5664.5, "series": [{"data": [[5.0, 4874.0], [6.0, 4958.5], [8.0, 45.0], [10.0, 2051.0], [12.0, 2477.0], [15.0, 4059.0], [18.0, 74.5], [19.0, 49.0], [20.0, 109.0], [24.0, 5664.5], [26.0, 54.0], [27.0, 101.0], [28.0, 49.0], [31.0, 47.0], [33.0, 115.0], [35.0, 78.0], [38.0, 112.0], [40.0, 101.5], [42.0, 53.5], [43.0, 103.0], [44.0, 106.0], [45.0, 104.0], [46.0, 106.0], [47.0, 92.0], [49.0, 53.0], [48.0, 103.0], [51.0, 102.0], [50.0, 48.0], [53.0, 60.0], [54.0, 75.0], [59.0, 81.0], [58.0, 109.0], [60.0, 111.0], [63.0, 143.0], [62.0, 103.0], [66.0, 102.5], [70.0, 108.5], [71.0, 53.0], [72.0, 145.5], [78.0, 107.5], [80.0, 102.0], [82.0, 103.0], [83.0, 102.0], [81.0, 106.0], [86.0, 103.0], [87.0, 128.0], [90.0, 99.5], [88.0, 102.5], [89.0, 101.0], [92.0, 103.0], [95.0, 108.0], [94.0, 106.0], [93.0, 103.0], [96.0, 104.0], [97.0, 101.0], [99.0, 106.0], [98.0, 105.5], [100.0, 102.0], [103.0, 106.0], [102.0, 102.0], [101.0, 111.0], [107.0, 102.0], [106.0, 105.0], [104.0, 109.0], [109.0, 109.0], [110.0, 65.5], [111.0, 103.0], [112.0, 104.0], [113.0, 101.0], [115.0, 102.0], [114.0, 99.5], [119.0, 101.0], [118.0, 104.0], [117.0, 102.0], [116.0, 104.5], [121.0, 106.0], [120.0, 100.5], [123.0, 103.0], [122.0, 110.5], [125.0, 100.0], [126.0, 105.0], [124.0, 101.5], [128.0, 99.0], [129.0, 100.0], [130.0, 102.0], [135.0, 106.5], [134.0, 104.0], [131.0, 99.5], [132.0, 100.5], [133.0, 103.0], [143.0, 102.0], [140.0, 103.0], [141.0, 106.0], [139.0, 104.0], [137.0, 100.0], [138.0, 101.5], [142.0, 113.0], [145.0, 102.0], [149.0, 102.0], [146.0, 102.0], [144.0, 101.5], [151.0, 101.0], [150.0, 104.0], [147.0, 103.0], [148.0, 101.0], [154.0, 103.5], [153.0, 101.0], [157.0, 103.0], [155.0, 102.0], [152.0, 103.0], [159.0, 105.0], [158.0, 105.0], [156.0, 100.0], [162.0, 101.0], [167.0, 102.0], [166.0, 102.0], [165.0, 101.5], [163.0, 101.0], [160.0, 105.0], [164.0, 101.0], [161.0, 103.0], [173.0, 102.0], [169.0, 98.5], [174.0, 102.0], [171.0, 102.0], [168.0, 104.0], [172.0, 100.0], [170.0, 99.5], [175.0, 102.0], [178.0, 102.5], [181.0, 100.5], [179.0, 102.0], [183.0, 103.0], [180.0, 102.5], [182.0, 102.0], [176.0, 101.0], [187.0, 103.0], [185.0, 102.0], [188.0, 103.0], [186.0, 101.0], [189.0, 102.0], [190.0, 101.0], [191.0, 102.5], [184.0, 102.0], [197.0, 100.0], [198.0, 101.0], [193.0, 101.0], [196.0, 101.0], [195.0, 101.0], [192.0, 101.0], [194.0, 100.0], [199.0, 102.0], [201.0, 102.5], [207.0, 101.0], [202.0, 103.0], [206.0, 101.0], [205.0, 101.0], [204.0, 101.0], [203.0, 100.5], [200.0, 102.0], [212.0, 100.5], [215.0, 101.0], [209.0, 98.5], [214.0, 101.0], [208.0, 89.5], [213.0, 101.0], [211.0, 101.0], [210.0, 101.0], [222.0, 100.0], [216.0, 101.0], [219.0, 100.0], [217.0, 99.0], [223.0, 101.0], [220.0, 102.0], [221.0, 100.0], [218.0, 100.0], [231.0, 100.0], [227.0, 100.0], [230.0, 99.0], [226.0, 99.0], [229.0, 100.0], [228.0, 100.0], [225.0, 100.0], [224.0, 100.0], [237.0, 99.0], [235.0, 99.0], [234.0, 99.0], [239.0, 98.0], [236.0, 98.0], [238.0, 99.0], [233.0, 100.0], [232.0, 100.0], [243.0, 99.0], [240.0, 100.0], [242.0, 99.0], [247.0, 98.0], [241.0, 99.0], [244.0, 99.0], [245.0, 98.0], [246.0, 98.5], [253.0, 98.0], [255.0, 77.0], [251.0, 99.0], [250.0, 99.0], [248.0, 99.0], [252.0, 98.0], [249.0, 99.0], [254.0, 97.0], [258.0, 70.0], [256.0, 98.0], [257.0, 100.5], [259.0, 99.0], [265.0, 53.0], [261.0, 66.0], [1.0, 513.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 265.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 5664.5, "series": [{"data": [[5.0, 4874.0], [6.0, 4958.5], [8.0, 45.0], [10.0, 2051.0], [12.0, 2477.0], [15.0, 4059.0], [18.0, 74.5], [19.0, 49.0], [20.0, 109.0], [24.0, 5664.5], [26.0, 54.0], [27.0, 101.0], [28.0, 49.0], [31.0, 47.0], [33.0, 115.0], [35.0, 78.0], [38.0, 112.0], [40.0, 101.5], [42.0, 53.0], [43.0, 103.0], [44.0, 106.0], [45.0, 104.0], [46.0, 106.0], [47.0, 92.0], [49.0, 53.0], [48.0, 103.0], [51.0, 102.0], [50.0, 48.0], [53.0, 60.0], [54.0, 75.0], [59.0, 81.0], [58.0, 109.0], [60.0, 111.0], [63.0, 143.0], [62.0, 103.0], [66.0, 102.5], [70.0, 108.5], [71.0, 53.0], [72.0, 145.5], [78.0, 107.5], [80.0, 102.0], [82.0, 103.0], [83.0, 102.0], [81.0, 106.0], [86.0, 103.0], [87.0, 128.0], [90.0, 99.5], [88.0, 102.5], [89.0, 101.0], [92.0, 103.0], [95.0, 108.0], [94.0, 106.0], [93.0, 103.0], [96.0, 104.0], [97.0, 101.0], [99.0, 106.0], [98.0, 105.5], [100.0, 102.0], [103.0, 106.0], [102.0, 102.0], [101.0, 111.0], [107.0, 102.0], [106.0, 105.0], [104.0, 109.0], [109.0, 109.0], [110.0, 65.5], [111.0, 103.0], [112.0, 104.0], [113.0, 101.0], [115.0, 102.0], [114.0, 99.5], [119.0, 101.0], [118.0, 104.0], [117.0, 102.0], [116.0, 104.5], [121.0, 106.0], [120.0, 100.5], [123.0, 103.0], [122.0, 110.5], [125.0, 100.0], [126.0, 105.0], [124.0, 101.5], [128.0, 99.0], [129.0, 100.0], [130.0, 102.0], [135.0, 106.5], [134.0, 104.0], [131.0, 99.5], [132.0, 100.5], [133.0, 103.0], [143.0, 102.0], [140.0, 103.0], [141.0, 106.0], [139.0, 104.0], [137.0, 100.0], [138.0, 101.5], [142.0, 113.0], [145.0, 102.0], [149.0, 102.0], [146.0, 102.0], [144.0, 101.5], [151.0, 101.0], [150.0, 104.0], [147.0, 103.0], [148.0, 101.0], [154.0, 103.5], [153.0, 101.0], [157.0, 103.0], [155.0, 102.0], [152.0, 103.0], [159.0, 105.0], [158.0, 105.0], [156.0, 100.0], [162.0, 101.0], [167.0, 102.0], [166.0, 102.0], [165.0, 101.5], [163.0, 101.0], [160.0, 105.0], [164.0, 101.0], [161.0, 103.0], [173.0, 102.0], [169.0, 98.5], [174.0, 102.0], [171.0, 102.0], [168.0, 104.0], [172.0, 100.0], [170.0, 99.0], [175.0, 102.0], [178.0, 102.5], [181.0, 100.5], [179.0, 102.0], [183.0, 103.0], [180.0, 102.5], [182.0, 102.0], [176.0, 101.0], [187.0, 103.0], [185.0, 102.0], [188.0, 103.0], [186.0, 101.0], [189.0, 102.0], [190.0, 101.0], [191.0, 102.5], [184.0, 102.0], [197.0, 100.0], [198.0, 101.0], [193.0, 101.0], [196.0, 101.0], [195.0, 101.0], [192.0, 101.0], [194.0, 100.0], [199.0, 102.0], [201.0, 102.0], [207.0, 101.0], [202.0, 103.0], [206.0, 101.0], [205.0, 101.0], [204.0, 101.0], [203.0, 100.5], [200.0, 102.0], [212.0, 100.5], [215.0, 101.0], [209.0, 98.0], [214.0, 101.0], [208.0, 89.5], [213.0, 101.0], [211.0, 101.0], [210.0, 101.0], [222.0, 100.0], [216.0, 101.0], [219.0, 100.0], [217.0, 99.0], [223.0, 101.0], [220.0, 102.0], [221.0, 100.0], [218.0, 100.0], [231.0, 100.0], [227.0, 100.0], [230.0, 99.0], [226.0, 99.0], [229.0, 100.0], [228.0, 100.0], [225.0, 100.0], [224.0, 100.0], [237.0, 99.0], [235.0, 99.0], [234.0, 99.0], [239.0, 98.0], [236.0, 98.0], [238.0, 99.0], [233.0, 100.0], [232.0, 100.0], [243.0, 99.0], [240.0, 100.0], [242.0, 99.0], [247.0, 98.0], [241.0, 99.0], [244.0, 99.0], [245.0, 98.0], [246.0, 98.5], [253.0, 98.0], [255.0, 77.0], [251.0, 99.0], [250.0, 99.0], [248.0, 99.0], [252.0, 98.0], [249.0, 99.0], [254.0, 97.0], [258.0, 70.0], [256.0, 98.0], [257.0, 100.5], [259.0, 99.0], [265.0, 53.0], [261.0, 66.0], [1.0, 513.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 265.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.98333333333333, "minX": 1.56474732E12, "maxY": 229.13333333333333, "series": [{"data": [[1.5647487E12, 177.13333333333333], [1.56474768E12, 218.4], [1.564749E12, 157.13333333333333], [1.56474738E12, 209.46666666666667], [1.5647481E12, 190.5], [1.5647478E12, 179.73333333333332], [1.5647484E12, 163.08333333333334], [1.5647475E12, 172.48333333333332], [1.56474756E12, 204.8], [1.56474816E12, 219.06666666666666], [1.56474786E12, 210.06666666666666], [1.56474858E12, 224.23333333333332], [1.56474888E12, 205.06666666666666], [1.56474798E12, 227.45], [1.56474828E12, 214.26666666666668], [1.56474834E12, 222.2], [1.56474864E12, 221.83333333333334], [1.56474774E12, 210.66666666666666], [1.56474804E12, 217.51666666666668], [1.56474906E12, 209.71666666666667], [1.56474846E12, 212.61666666666667], [1.56474744E12, 218.0], [1.56474876E12, 201.58333333333334], [1.56474882E12, 193.21666666666667], [1.56474912E12, 83.98333333333333], [1.56474822E12, 201.78333333333333], [1.56474852E12, 207.75], [1.56474732E12, 89.4], [1.56474894E12, 215.1], [1.56474792E12, 229.13333333333333], [1.56474762E12, 223.81666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56474912E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 84.31666666666666, "minX": 1.56474732E12, "maxY": 229.13333333333333, "series": [{"data": [[1.5647487E12, 177.13333333333333], [1.56474768E12, 218.4], [1.564749E12, 157.13333333333333], [1.56474738E12, 209.46666666666667], [1.5647481E12, 190.5], [1.5647478E12, 179.73333333333332], [1.5647484E12, 163.08333333333334], [1.5647475E12, 172.48333333333332], [1.56474756E12, 204.8], [1.56474816E12, 219.06666666666666], [1.56474786E12, 210.06666666666666], [1.56474858E12, 224.23333333333332], [1.56474888E12, 205.06666666666666], [1.56474798E12, 227.45], [1.56474828E12, 214.26666666666668], [1.56474834E12, 222.2], [1.56474864E12, 221.83333333333334], [1.56474774E12, 210.66666666666666], [1.56474804E12, 217.51666666666668], [1.56474906E12, 209.71666666666667], [1.56474846E12, 212.61666666666667], [1.56474744E12, 218.0], [1.56474876E12, 201.58333333333334], [1.56474882E12, 193.21666666666667], [1.56474912E12, 84.31666666666666], [1.56474822E12, 201.78333333333333], [1.56474852E12, 207.75], [1.56474732E12, 89.06666666666666], [1.56474894E12, 215.1], [1.56474792E12, 229.13333333333333], [1.56474762E12, 223.81666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56474912E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 42.06666666666667, "minX": 1.56474732E12, "maxY": 114.6, "series": [{"data": [[1.5647487E12, 88.63333333333334], [1.56474768E12, 109.21666666666667], [1.564749E12, 78.61666666666666], [1.56474738E12, 104.66666666666667], [1.5647481E12, 95.15], [1.5647478E12, 89.85], [1.5647484E12, 81.61666666666666], [1.5647475E12, 86.26666666666667], [1.56474756E12, 102.38333333333334], [1.56474816E12, 109.61666666666666], [1.56474786E12, 104.98333333333333], [1.56474858E12, 112.11666666666666], [1.56474888E12, 102.53333333333333], [1.56474798E12, 113.75], [1.56474828E12, 107.13333333333334], [1.56474834E12, 111.1], [1.56474864E12, 110.88333333333334], [1.56474774E12, 105.36666666666666], [1.56474804E12, 108.8], [1.56474906E12, 104.81666666666666], [1.56474846E12, 106.28333333333333], [1.56474744E12, 109.03333333333333], [1.56474876E12, 100.81666666666666], [1.56474882E12, 96.51666666666667], [1.56474912E12, 42.25], [1.56474822E12, 100.81666666666666], [1.56474852E12, 103.85], [1.56474732E12, 44.6], [1.56474894E12, 107.55], [1.56474792E12, 114.6], [1.56474762E12, 111.88333333333334]], "isOverall": false, "label": "Send Vote-success", "isController": false}, {"data": [[1.5647487E12, 88.5], [1.56474768E12, 109.18333333333334], [1.564749E12, 78.51666666666667], [1.56474738E12, 104.8], [1.5647481E12, 95.35], [1.5647478E12, 89.88333333333334], [1.5647484E12, 81.46666666666667], [1.5647475E12, 86.21666666666667], [1.56474756E12, 102.41666666666667], [1.56474816E12, 109.45], [1.56474786E12, 105.08333333333333], [1.56474858E12, 112.11666666666666], [1.56474888E12, 102.53333333333333], [1.56474798E12, 113.7], [1.56474828E12, 107.13333333333334], [1.56474834E12, 111.1], [1.56474864E12, 110.95], [1.56474774E12, 105.3], [1.56474804E12, 108.71666666666667], [1.56474906E12, 104.9], [1.56474846E12, 106.33333333333333], [1.56474744E12, 108.96666666666667], [1.56474876E12, 100.76666666666667], [1.56474882E12, 96.7], [1.56474912E12, 42.06666666666667], [1.56474822E12, 100.96666666666667], [1.56474852E12, 103.9], [1.56474732E12, 44.46666666666667], [1.56474894E12, 107.55], [1.56474792E12, 114.53333333333333], [1.56474762E12, 111.93333333333334]], "isOverall": false, "label": "Get Votes-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56474912E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 84.31666666666666, "minX": 1.56474732E12, "maxY": 229.13333333333333, "series": [{"data": [[1.5647487E12, 177.13333333333333], [1.56474768E12, 218.4], [1.564749E12, 157.13333333333333], [1.56474738E12, 209.46666666666667], [1.5647481E12, 190.5], [1.5647478E12, 179.73333333333332], [1.5647484E12, 163.08333333333334], [1.5647475E12, 172.48333333333332], [1.56474756E12, 204.8], [1.56474816E12, 219.06666666666666], [1.56474786E12, 210.06666666666666], [1.56474858E12, 224.23333333333332], [1.56474888E12, 205.06666666666666], [1.56474798E12, 227.45], [1.56474828E12, 214.26666666666668], [1.56474834E12, 222.2], [1.56474864E12, 221.83333333333334], [1.56474774E12, 210.66666666666666], [1.56474804E12, 217.51666666666668], [1.56474906E12, 209.71666666666667], [1.56474846E12, 212.61666666666667], [1.56474744E12, 218.0], [1.56474876E12, 201.58333333333334], [1.56474882E12, 193.21666666666667], [1.56474912E12, 84.31666666666666], [1.56474822E12, 201.78333333333333], [1.56474852E12, 207.75], [1.56474732E12, 89.06666666666666], [1.56474894E12, 215.1], [1.56474792E12, 229.13333333333333], [1.56474762E12, 223.81666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56474912E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

